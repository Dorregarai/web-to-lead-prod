{"version":3,"sources":["Components/Address/Address.jsx","Components/Customer/Customer.jsx","Components/Check/Check.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Address","props","_useState","useState","_useState2","Object","slicedToArray","check","setCheck","isAddressActive","react_default","a","createElement","className","onSubmit","setIsCheckActive","setIsAddressActive","input","label","defaultValue","data","bCountry","required","onChange","event","setData","objectSpread","target","value","bState","bZip","bCity","bStreet","components_checkbox","assistiveText","id","labels","console","log","components_button","variant","onClick","setIsCustomerActive","type","Customer","isCustomerActive","cName","cSite","fName","lName","date_picker","Birthday","formattedDate","handleBirthdayChange","action","dataAsArray","keys","map","key","apply","concat","toConsumableArray","onCalendarFocus","formatter","date","moment","format","parser","dateString","toDate","Email","Check","isCheckActive","document","getElementById","submit","style","display","method","name","maxLength","size","App","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","brand_band","Boolean","window","location","hostname","match","ReactDOM","render","icon_settings","iconPath","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dad4c6f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Input from \"@salesforce/design-system-react/components/input\";\nimport Button from \"@salesforce/design-system-react/components/button\";\nimport Checkbox from '@salesforce/design-system-react/components/checkbox';\n\nexport default function Address(props) {\n    const [check, setCheck] = useState(false);\n\n    const handlePrevClick = () => {\n        props.setIsAddressActive(false);\n        props.setIsCustomerActive(true);\n    }\n\n    const handleNextClick = () => {\n        props.setIsCheckActive(true);\n        props.setIsAddressActive(false);\n    }\n\n    const handleCheckChange = () => {\n        setCheck(!check);\n        console.log(check);\n    }\n\n    const handleBCountryChange = (event) => {\n        props.setData({ ...props.data, 'bCountry': event.target.value });\n    }\n\n    const handleBStateChange = (event) => {\n        props.setData({ ...props.data, 'bState': event.target.value });\n    }\n\n    const handleBZipChange = (event) => {\n        props.setData({ ...props.data, 'bZip': event.target.value });\n    }\n    \n    const handleBCityChange = (event) => {\n        props.setData({ ...props.data, 'bCity': event.target.value });\n    }\n    \n    const handleBStreetChange = (event) => {\n        props.setData({ ...props.data, 'bStreet': event.target.value });\n    }\n\n    if(props.isAddressActive) {\n        return(\n                <div className=\"slds-box slds-theme_default slds-size_4-of-12\">\n                    <h3 className=\"slds-text-heading_large slds-truncate slds-p-bottom--large\">Address Information</h3>\n                    <form onSubmit={handleNextClick}>\n                        <Input label=\"Billing Country\" defaultValue={props.data.bCountry} required onChange={handleBCountryChange} />\n                        <Input label=\"Billing State / Province\" defaultValue={props.data.bState} required onChange={handleBStateChange} />\n                        <Input label=\"Billing Zip / Postal Code\" defaultValue={props.data.bZip} required onChange={handleBZipChange} />\n                        <Input label=\"Billing City\" defaultValue={props.data.bCity} required onChange={handleBCityChange} />\n                        <Input label=\"Billing Street\" defaultValue={props.data.bStreet} required onChange={handleBStreetChange} />\n                        <Checkbox\n\t\t\t\t\t\t\tassistiveText={{\n\t\t\t\t\t\t\t\tlabel: 'Add shiping address',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"checkbox-example\"\n\t\t\t\t\t\t\tlabels={{\n\t\t\t\t\t\t\t\tlabel: 'Default',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonChange={handleCheckChange}\n\t\t\t\t\t\t/>\n\n                        <div className=\"slds-p-top--large slds-float_right\">\n                            <Button label=\"Prev\" variant=\"neutral\" onClick={handlePrevClick} />\n                            <Button label=\"Next\" variant=\"brand\" type=\"submit\" />\n                        </div>\n                    </form>\n                </div>\n        )\n    } else {\n        return(<div></div>)\n    }\n}","import React from \"react\";\nimport Input from \"@salesforce/design-system-react/components/input\";\nimport Button from \"@salesforce/design-system-react/components/button\";\nimport Datepicker from '@salesforce/design-system-react/components/date-picker';\nimport moment from 'moment';\n\nexport default function Customer(props) {\n    const handleNextClick = () => {\n        props.setIsCustomerActive(false);\n        props.setIsAddressActive(true);\n    }\n\n    const handleNameChange = (event) => {\n        props.setData({ ...props.data, 'cName': event.target.value });\n    }\n\n    const handleSiteChange = (event) => {\n        props.setData({ ...props.data, 'cSite': event.target.value });\n    }\n\n    const handleFNameChange = (event) => {\n        props.setData({ ...props.data, 'fName': event.target.value });\n    }\n    \n    const handleLNameChange = (event) => {\n        props.setData({ ...props.data, 'lName': event.target.value });\n    }\n    \n    const handleBirthdayChange = (event, data) => {\n        props.setData({ ...props.data, 'Birthday': data.formattedDate });\n    }\n\n    const handleEmailChange = (event) => {\n        props.setData({ ...props.data, 'Email': event.target.value });\n    }\n\n    if(props.isCustomerActive) {\n        return (\n            <div className=\"slds-box slds-theme_default slds-size_4-of-12\">\n                    <h3 className=\"slds-text-heading_large slds-truncate slds-p-bottom--large\">Customer Information</h3>\n                    <form onSubmit={handleNextClick}>\n                        <Input label=\"Company name\" defaultValue={props.data.cName} required onChange={handleNameChange} />\n                        <Input label=\"Company site\" defaultValue={props.data.cSite} type=\"url\" onChange={handleSiteChange} />\n                        <Input label=\"First name\" defaultValue={props.data.fName} required onChange={handleFNameChange} />\n                        <Input label=\"Last name\" defaultValue={props.data.lName} required onChange={handleLNameChange} />\n                        \n                        <Datepicker\n                            label=\"Birthday\" required\n                            onChange={(event, data) => {\n                                handleBirthdayChange(event, data);\n\n                                if (props.action) {\n                                    const dataAsArray = Object.keys(data).map((key) => data[key]);\n                                    props.action('onChange')(event, data, ...dataAsArray);\n                                } \n                            }}\n                            onCalendarFocus={(event, data) => {\n                                if (props.action) {\n                                    const dataAsArray = Object.keys(data).map((key) => data[key]);\n                                    props.action('onCalendarFocus')(event, data, ...dataAsArray);\n                                }\n                            }}\n                            formatter={(date) => {\n                                return date ? moment(date).format('YYYY-MM-DD') : '';\n                            }} \n                            parser={(dateString) => {\n                                return moment(dateString, 'MM-DD-YYYY').toDate();\n                            }}\n                            value={moment(props.data.Birthday).toDate()}\n                        />\n\n                        <Input label=\"Email\" type=\"email\" defaultValue={props.data.Email} required onChange={handleEmailChange} />\n\n                        <div className=\"slds-p-top--large slds-float_right\">\n                            <Button label=\"Next\" variant=\"brand\" type=\"submit\" />\n                        </div>\n                    </form>\n                </div>\n        )\n    } else {\n        return (\n            <div></div>\n        )\n    }\n}","import React from \"react\";\nimport Button from \"@salesforce/design-system-react/components/button\";\n\nexport default function Check(props) {\n\n    const handlePrevClick = () => {\n        props.setIsCheckActive(false);\n        props.setIsAddressActive(true);\n    }\n\n    const handleFinishClick = () => {\n        document.getElementById('form').submit();\n    }\n\n    if(props.isCheckActive) {\n        return(\n            <div className=\"slds-box slds-theme_default slds-size_4-of-12\">\n                    <h3 className=\"slds-text-heading_large slds-truncate slds-p-bottom--large\">Check & Submit</h3>\n                <div>\n\n                    <table>\n                        <tbody>\n                        <tr>\n                            <td>Company name</td>\n                            <td>{props.data.cName}</td>\n                        </tr>\n                        <tr>\n                            <td>Company site</td>\n                            <td>{props.data.cSite}</td>\n                        </tr>\n                        <tr>\n                            <td>First name</td>\n                            <td>{props.data.fName}</td>\n                        </tr>\n                        <tr>\n                            <td>Last name</td>\n                            <td>{props.data.lName}</td>\n                        </tr>\n                        <tr>\n                            <td>Birthday</td>\n                            <td>{props.data.Birthday}</td>\n                        </tr>\n                        <tr>\n                            <td>Email</td>\n                            <td>{props.data.Email}</td>\n                        </tr>\n                        <tr>\n                            <td>Billing Country</td>\n                            <td>{props.data.bCountry}</td>\n                        </tr>\n                        <tr>\n                            <td>Billing State / Province</td>\n                            <td>{props.data.bState}</td>\n                        </tr>\n                        <tr>\n                            <td>Billing Zip / Postal Code</td>\n                            <td>{props.data.bZip}</td>\n                        </tr>\n                        <tr>\n                            <td>Billing City</td>\n                            <td>{props.data.bCity}</td>\n                        </tr>\n                        <tr>\n                            <td>Billing Street</td>\n                            <td>{props.data.bStreet}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n\n                    <div className=\"slds-p-top--large slds-float_right\">\n                        <Button label=\"Prev\" variant=\"neutral\" onClick={handlePrevClick} />\n                        <Button label=\"Submit\" variant=\"brand\" onClick={handleFinishClick} />\n                    </div>\n                </div>\n\n                <div style={{\"display\": \"none\"}}>\n                        <form id=\"form\" action=\"https://webto.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8\" method=\"POST\">\n\n                            <input type=\"hidden\" name=\"oid\" value=\"00D5g000005IJxW\" />\n                            <input type=\"hidden\" name=\"retURL\" value=\"https://webtolead-dev-ed.lightning.force.com/lightning/page/home\" />\n\n                            <input value={props.data.cName} id=\"company\" maxLength=\"40\" name=\"company\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.cSite} id=\"url\" maxLength=\"80\" name=\"url\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.fName} id=\"first_name\" maxLength=\"40\" name=\"first_name\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.lName} id=\"last_name\" maxLength=\"80\" name=\"last_name\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.Birthday} id=\"00N5g00000DsdjE\" name=\"00N5g00000DsdjE\" size=\"12\" type=\"text\" />\n\n                            <input value={props.data.Email} id=\"email\" maxLength=\"80\" name=\"email\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.bCountry} id=\"country\" maxLength=\"40\" name=\"country\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.bState} id=\"state\" maxLength=\"20\" name=\"state\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.bZip} id=\"zip\" maxLength=\"20\" name=\"zip\" size=\"20\" type=\"text\" />\n\n                            <input value={props.data.bCity} id=\"city\" maxLength=\"40\" name=\"city\" size=\"20\" type=\"text\" />\n\n                            <textarea value={props.data.bStreet} name=\"street\"></textarea>\n\n                        </form>\n                    </div>\n\n            </div>\n        )\n    } else {\n        return(<div></div>)\n    }\n}","import React, { useState } from 'react';\nimport BrandBand from '@salesforce/design-system-react/components/brand-band';\nimport Address from './Components/Address';\nimport Customer from './Components/Customer';\nimport Check from './Components/Check';\n\nexport default function App() {\n  const [ isCustomerActive, setIsCustomerActive ] = useState(true);\n  const [ isAddressActive, setIsAddressActive ] = useState(false);\n  const [ isCheckActive, setIsCheckActive ] = useState(false);\n  const [ data, setData ] = useState({});\n\n  return (\n      <div>\n        <BrandBand className=\"slds-align_absolute-center\">\n          <Customer\n            isCustomerActive={isCustomerActive}\n            setIsAddressActive={setIsAddressActive}\n            setIsCustomerActive={setIsCustomerActive}\n            data={data}\n            setData={setData}\n          />\n\n          <Address\n            setIsCustomerActive={setIsCustomerActive}\n            setIsAddressActive={setIsAddressActive}\n            isAddressActive={isAddressActive}\n            setIsCheckActive={setIsCheckActive}\n            data={data}\n            setData={setData}\n          />\n\n          <Check\n            isCheckActive={isCheckActive}\n            setIsAddressActive={setIsAddressActive}\n            setIsCheckActive={setIsCheckActive}\n            data={data}\n          />\n        </BrandBand>\n      </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport IconSettings from '@salesforce/design-system-react/components/icon-settings';\n\n\nReactDOM.render(\n    <IconSettings iconPath=\"/assets/icons\">\n      <App />\n    </IconSettings>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}